{"version":3,"sources":["theme/GlobalStyle.js","templates/MainTemplate.js","base/variables.js","utils/index.js","api/openaq.js","api/wikipedia.js","context/index.js","components/Datalist/Option/Option.js","components/Datalist/Datalist.js","components/Button/Button.js","components/Label/Label.js","components/Input/Input.js","components/SearchForm/SearchForm.js","components/ErrorMessage/ErrorMessage.js","templates/CitiesTemplate.js","components/List/ListItem/ListItem.js","components/CityList/CityItem/CityItem.js","components/List/List.js","components/CityList/CityList.js","components/Spinner/Spinner.js","views/Cities.js","views/Root.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledMain","styled","main","MainTemplate","children","countries","abbrList","createQueryParams","params","Object","keys","map","k","join","defaultParams","limit","order_by","sort","parameter","date_from","date","year","getUTCFullYear","month","getUTCMonth","slice","day","getUTCDate","setDate","Date","fetchPollutionData","country","queryParams","axios","action","format","explaintext","redirects","prop","exintro","exsentences","fetchWikipediaData","titles","PageContext","React","createContext","Option","value","Datalist","props","key","StyledButton","button","Button","type","StyledLabel","label","Label","labelName","srOnly","className","StyledInput","input","Input","StyledForm","form","StyledFormGroup","div","SearchForm","role","useContext","doFetch","isLoading","onSubmit","e","preventDefault","target","querySelector","autoComplete","name","list","id","disabled","ErrorMessage","p","CitiesTemplate","isError","ListItem","li","CityItem","title","description","List","ul","StyledList","CityList","cities","length","pageid","extract","StyledSpinner","Spinner","aria-busy","removeDuplicates","items","arr","filter","item","index","array","findIndex","element","city","splice","getTitles","str","split","encodeURIComponent","getAbbr","string","toLowerCase","Cities","useState","data","setData","setIsLoading","setIsError","a","undefined","abbr","results","removedDuplicates","pages","query","values","useDataApi","Provider","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4e4c2b.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n\t*, *::before, *::after {\n\t\tbox-sizing: border-box;\n\t\t-webkit-font-smoothing: antialiased;\n  \t-moz-osx-font-smoothing: grayscale;\n\t}\t\n\n\tbody {\n\t\tfont-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n\t}\n\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport GlobalStyle from 'theme/GlobalStyle';\n\nconst StyledMain = styled.main`\n  margin: 0 auto;\n  padding: 0 30px;\n  text-align: center;\n\n  @media (min-width: 576px) {\n    max-width: 600px;\n  }\n`;\n\nconst MainTemplate = ({ children }) => {\n  return (\n    <StyledMain>\n      <h1>The most polluted cities</h1>\n      <p>Check 10 the most polluted cities in Poland, Germany, Spain or France.</p>\n      <GlobalStyle />\n      {children}\n    </StyledMain>\n  )\n}\n\nMainTemplate.propTypes = {\n  children: PropTypes.element,\n}\n\nexport default MainTemplate;\n","export const wikipedia_url = 'https://en.wikipedia.org/w/api.php?origin=*';\nexport const openaq_url = 'https://api.openaq.org/v1';\n\nexport const countries = ['Poland', 'Germany', 'Spain', 'France'];\nexport const abbrList = ['PL', 'DE', 'ES', 'FR'];\n","export const createQueryParams = ( params ) => {\n  return Object.keys(params)\n    .map(k => `${k}=${params[k]}`)\n    .join('&');\n};\n","import axios from 'axios';\nimport { openaq_url } from 'base/variables';\nimport { createQueryParams } from 'utils';\n\nconst setDate = ( date ) => {\n  const year = date.getUTCFullYear();\n  const month = `0${ date.getUTCMonth() + 1 }`.slice( -2 );\n  const day = `0${ date.getUTCDate() }`.slice( -2 );\n\n  return `${ year }-${ month }-${ day }`;\n};\n\nconst limit = 500;\nconst measurements = '/measurements';\n\nconst defaultParams = {\n  limit: limit,\n  order_by: 'value',\n  sort: 'desc',\n  parameter: 'pm25',\n  date_from: setDate(new Date()),\n};\n\nexport const fetchPollutionData = ( country ) => {\n  const queryParams = {...defaultParams, country};\n  const params = createQueryParams(queryParams);\n\n  return axios(`${openaq_url}${measurements}?${params}`);\n}\n","import axios from 'axios';\nimport { wikipedia_url } from 'base/variables';\nimport { createQueryParams } from 'utils';\n\nconst defaultParams = {\n  action: 'query',\n  format: 'json',\n  explaintext: '',\n  redirects: 1,\n  prop: 'extracts',\n  exintro: '',\n  exsentences: 2,\n};\n\nexport const fetchWikipediaData = ( titles ) => {\n  const queryParams = {...defaultParams, titles};\n  const params = createQueryParams(queryParams);\n  \n  return axios(`${wikipedia_url}&${params}`);\n}\n","import React from 'react';\n\nconst PageContext = React.createContext();\n\nexport default PageContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Option = ({ country }) => {\n  return (\n    <option value={country} />\n  )\n}\n\nOption.propTypes = {\n  country: PropTypes.string,\n}\n\nexport default Option;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Option from './Option/Option';\n\nconst Datalist = ({ countries, ...props }) => {\n  return (\n    <datalist {...props}>\n      {countries.map( country => (\n        <Option\n          key={country}\n          country={country}\n        />\n      ))}\n    </datalist>\n  )\n}\n\nDatalist.propTypes = {\n  countries: PropTypes.array,\n}\n\nexport default Datalist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  display: inline-block;\n  font-weight: 400;\n  color: #fff;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  background-color: #007bff;\n  border: 1px solid #007bff;;\n  padding: .375rem .75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: .25rem;\n  transition: color .15s;\n\n  &:disabled {\n    opacity: .65;\n  }\n\n  &:hover {\n    cursor: pointer;\n  } \n`;\n\nconst Button = ({ type, ...props}) => {\n  return (\n    <StyledButton\n      type={type}\n      {...props}\n    />\n  )\n}\n\nButton.propTypes = {\n  type: PropTypes.string,\n}\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  width: 100%;\n  display: inline-block;\n`;\n\nconst Label = ({ children, labelName, srOnly }) => {\n  return (\n    <StyledLabel>\n      {srOnly\n        ? <span className=\"sr-only\">{labelName}</span>\n        : <>{labelName}</>\n      }     \n      {children}\n    </StyledLabel>\n  )\n}\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  labelName: PropTypes.string,\n  srOnly: PropTypes.bool,\n}\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledInput = styled.input`\n  display: block;\n  width: 100%;\n  height: calc(1.5em + .75rem + 2px);\n  padding: .375rem .75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: .25rem;\n`;\n\nconst Input = ({ type, ...props }) => {\n  return (\n    <StyledInput\n      type={type}\n      {...props}\n    />\n  )\n}\n\nInput.propTypes = {\n  type: PropTypes.string,\n}\n\nexport default Input;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport PageContext from '../../context';\nimport { countries } from 'base/variables';\nimport Datalist from 'components/Datalist/Datalist';\nimport Button from 'components/Button/Button';\nimport Label from 'components/Label/Label';\nimport Input from 'components/Input/Input';\n\nconst StyledForm = styled.form`\n  margin-top: 20px;\n  margin-bottom: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  @media (min-width: 400px) {\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n  }\n`;\n\nconst StyledFormGroup = styled.div`\n  position: relative;\n  flex: 0 0 70%;\n\n  @media (min-width: 400px) {\n    margin-right: 4px;\n  }\n`;\n\nconst SearchForm = ({ role }) => {\n  const { doFetch, isLoading } = useContext(PageContext);\n\n  return (\n    <StyledForm\n      role={role}\n      onSubmit={( e ) => {\n        e.preventDefault();\n\n        const value = e.target.querySelector(\"input[name='country']\").value;\n\n        doFetch( value );\n      }}\n    >\n      <StyledFormGroup>\n        <Label\n          srOnly\n          labelName=\"Country name:\"\n        >\n          <Input\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"country\"\n            list=\"countries\"\n          />\n          <Datalist\n            id=\"countries\"\n            countries={countries}\n          />\n        </Label>\n      </StyledFormGroup>\n      <Button\n        type=\"submit\"\n        disabled={isLoading}\n      >\n        Search\n      </Button>\n    </StyledForm>\n  )\n}\n\nSearchForm.propTypes = {\n  role: PropTypes.string,\n}\n\nexport default SearchForm;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.p`\n  width: 100%;\n  height: 18px;\n  font-weight: 700;\n  color: red;\n`;\n\nexport default ErrorMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\n\nconst CitiesTemplate = ({ children, isError }) => {\n  return (\n    <>\n      <ErrorMessage>{isError}</ErrorMessage>\n      <SearchForm role=\"search\" />\n      {children}\n    </>\n  )\n}\n\nCitiesTemplate.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default CitiesTemplate;\n","import styled from 'styled-components';\n\nconst ListItem = styled.li`\n  margin-bottom: -1px;\n  padding: .75rem 1.25rem;\n  background-color: #fff;\n  border: 1px solid rgba(0,0,0,.125);\n\n  :first-child {\n    border-top-left-radius: .25rem;\n    border-top-right-radius: .25rem;\n  }\n\n  :last-child {\n    margin-bottom: 0;\n    border-bottom-right-radius: .25rem;\n    border-bottom-left-radius: .25rem;\n  }\n`;\n\nexport default ListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from 'components/List/ListItem/ListItem';\n\nconst CityItem = ({ title, description }) => {\n  return (\n    <ListItem>\n      <h2>{title}</h2>\n      <p>{description}</p>\n    </ListItem>\n  )\n}\n\nCityItem.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n}\n\nexport default CityItem;\n","import styled from 'styled-components';\n\nconst List = styled.ul`\n  padding: 0;\n  list-style: none;\n`;\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport CityItem from './CityItem/CityItem';\nimport List from '../List/List';\n\nconst StyledList = styled(List)`\n  margin-top: 40px;\n`;\n\nconst CityList = ({ cities }) => {\n  return (\n    <>\n      {cities.length > 0 &&\n        <StyledList>\n          {cities.map(({ pageid, title, extract }) => (\n            <CityItem\n              key={pageid}\n              title={title}\n              description={extract}\n            />\n          ))}\n        </StyledList> \n      }\n    </>\n  )\n}\n\nCityList.propTypes = {\n  cities: PropTypes.array,\n}\n\nexport default CityList;\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpinner = styled.div`\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: text-bottom;\n  border: .25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  animation: spinner-border .75s linear infinite;\n\n  @keyframes spinner-border {\n    to { transform: rotate(360deg); }\n  }\n`;\n\nconst Spinner = () => {\n  return (\n    <StyledSpinner aria-busy=\"true\" role=\"progressbar\">\n      <span className=\"sr-only\">Loading content...</span>\n    </StyledSpinner>\n  )\n}\n\nexport default Spinner;\n\n","import React, { useState } from 'react';\nimport { fetchPollutionData } from 'api/openaq';\nimport { fetchWikipediaData } from 'api/wikipedia';\nimport PageContext from 'context';\nimport { countries, abbrList } from 'base/variables';\nimport CitiesTemplate from 'templates/CitiesTemplate';\nimport CityList from 'components/CityList/CityList';\nimport Spinner from 'components/Spinner/Spinner';\n\nconst removeDuplicates = ( items ) => {\n  const arr = items.filter( ( item, index, array ) => {\n    return index === array.findIndex( ( element ) => {\n      return element.city === item.city;\n    } );\n  } );\n\n  arr.splice( 10 );\n\n  return arr;\n};\n\nconst getTitles = ( items ) => {\n  const str = items.map( ( item ) => item.city.split( '/' )[ 0 ] );\n\n  return encodeURIComponent( str.join( '|' ) );\n};\n\nconst getAbbr = ( string ) => {\n  const value = string.toLowerCase();\n  const index = countries.findIndex( country => country.toLowerCase() === value );\n\n  return abbrList[index];\n}\n\nconst useDataApi = () => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState('');\n\n  const fetchData = async ( string ) => {\n    const abbr = getAbbr( string );\n\n    if ( abbr !== undefined ) { \n      setData([]);\n      setIsError('');\n      setIsLoading(true);\n  \n      try {\n        const { data: { results } } = await fetchPollutionData(abbr);\n        const removedDuplicates = removeDuplicates( results );\n        const titles = getTitles(removedDuplicates);\n        const { data: { query: { pages } } } = await fetchWikipediaData(titles);  \n        \n        setIsLoading(false); \n        setData(Object.values(pages));\n      } catch (error) {\n        setIsError('Something went wrong, try again...');\n        setIsLoading(false);\n      }\n    } else {\n      setIsError('Wrong country provided');\n    }\n  }\n \n  return [{ data, isLoading, isError }, fetchData];\n}\n\nconst Cities = () => {  \n  const [{ data, isLoading, isError }, doFetch] = useDataApi();\n\n  return (   \n    <PageContext.Provider\n      value={{\n        doFetch,\n        isLoading,\n      }}\n    >\n      <CitiesTemplate isError={isError}>\n        {isLoading && <Spinner />}\n        <CityList cities={data} />\n      </CitiesTemplate>\n    </PageContext.Provider>    \n  )\n}\n\nexport default Cities;\n","import React from 'react';\nimport 'normalize.css';\nimport MainTemplate from 'templates/MainTemplate';\nimport Cities from 'views/Cities';\n\nconst Root = () => {\n  return (\n    <MainTemplate>      \n      <Cities />\n    </MainTemplate>                                      \n  )                             \n}                                       \n                                        \nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './views/Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}